{
  "_args": [
    [
      {
        "name": "i18n-js",
        "raw": "i18n-js@http://github.com/fnando/i18n-js/archive/v3.0.0.rc8.tar.gz",
        "rawSpec": "http://github.com/fnando/i18n-js/archive/v3.0.0.rc8.tar.gz",
        "scope": null,
        "spec": "http://github.com/fnando/i18n-js/archive/v3.0.0.rc8.tar.gz",
        "type": "remote"
      },
      "/Users/somakihiro/rails_project"
    ]
  ],
  "_from": "http://github.com/fnando/i18n-js/archive/v3.0.0.rc8.tar.gz",
  "_id": "i18n-js@0.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/i18n-js",
  "_phantomChildren": {},
  "_requested": {
    "name": "i18n-js",
    "raw": "i18n-js@http://github.com/fnando/i18n-js/archive/v3.0.0.rc8.tar.gz",
    "rawSpec": "http://github.com/fnando/i18n-js/archive/v3.0.0.rc8.tar.gz",
    "scope": null,
    "spec": "http://github.com/fnando/i18n-js/archive/v3.0.0.rc8.tar.gz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://github.com/fnando/i18n-js/archive/v3.0.0.rc8.tar.gz",
  "_shasum": "ec616dd56fe3bfc35c6e6030d1502210cd7c29b3",
  "_shrinkwrap": null,
  "_spec": "i18n-js@http://github.com/fnando/i18n-js/archive/v3.0.0.rc8.tar.gz",
  "_where": "/Users/somakihiro/rails_project",
  "dependencies": {},
  "description": "[![Build Status](https://travis-ci.org/fnando/i18n-js.svg?branch=master)](https://travis-ci.org/fnando/i18n-js) [![Code Climate](https://codeclimate.com/github/fnando/i18n-js.png)](https://codeclimate.com/github/fnando/i18n-js)",
  "devDependencies": {
    "jasmine-node": "*"
  },
  "main": "app/assets/javascripts/i18n.js",
  "name": "i18n-js",
  "optionalDependencies": {},
  "readme": "# I18n.js\n\n[![Build Status](https://travis-ci.org/fnando/i18n-js.svg?branch=master)](https://travis-ci.org/fnando/i18n-js)\n[![Code Climate](https://codeclimate.com/github/fnando/i18n-js.png)](https://codeclimate.com/github/fnando/i18n-js)\n\nIt's a small library to provide the Rails I18n translations on the JavaScript.\n\nFeatures:\n\n- Pluralization\n- Date/Time localization\n- Number localization\n- Locale fallback\n- Asset pipeline support\n- Lots more! :)\n\n## Usage\n\n### Installation\n\n#### Rails app\n\nAdd the gem to your Gemfile.\n\n    source \"https://rubygems.org\"\n    gem \"rails\", \"3.2.3\"\n    gem \"i18n-js\"\n\n#### Rails app with [Asset Pipeline](http://guides.rubyonrails.org/asset_pipeline.html)\n\nIf you're using the [asset pipeline](http://guides.rubyonrails.org/asset_pipeline.html),\nthen you must add the following line to your `app/assets/javascripts/application.js`.\n\n```javascript\n//\n// This is optional (in case you have `I18n is not defined` error)\n// If you want to put this line, you must put it BEFORE `i18n/translations`\n//= require i18n\n//\n// This is a must\n//= require i18n/translations\n```\n\n#### Rails app without [Asset Pipeline](http://guides.rubyonrails.org/asset_pipeline.html)\n\n\nFirst, put this in your `application.html` (layout file).\nThen get the JS files following the instructions below.\n```erb\n<%# This is just an example, you can put `i18n.js` and `translations.js` anywhere you like %>\n<%# Unlike the Asset Pipeline example, you need to require both **in order** %>\n<%= javascript_include_tag \"i18n\" %>\n<%= javascript_include_tag \"translations\" %>\n```\n\n**There are two ways to get `translations.js`.**\n\n1. This `translations.js` file can be automatically generated by the `I18n::JS::Middleware`.  \n  Just add `config.middleware.use I18n::JS::Middleware` to your `config/application.rb` file.  \n  Notice: Don't add this middleware if you are using [asset pipeline](http://guides.rubyonrails.org/asset_pipeline.html)!\n2. If you can't or prefer not to generate this file,\n  you can move the middleware line to your `config/environments/development.rb` file\n  and run `rake i18n:js:export` before deploying.\n  This will export all translation files, including the custom scopes \n  you may have defined on `config/i18n-js.yml`.  \n  If `I18n.available_locales` is set (e.g. in your Rails `config/application.rb` file) \n  then only the specified locales will be exported.  \n  Current version of `i18n.js` will also be exported to avoid version mismatching by downloading.\n\n#### Export Configuration (For translations)\n\nExported translation files generated by `I18n::JS::Middleware` or `rake i18n:js:export` can be customized with config file `config/i18n-js.yml` (use `rails generate i18n:js:config` to create it). You can even get more files generated to different folders and with different translations to best suit your needs. But this does not affect anything if you use Asset Pipeline.\n\nExamples:\n```yaml\ntranslations:\n- file: 'public/javascripts/path-to-your-messages-file.js'\n  only: '*.date.formats'\n- file: 'public/javascripts/path-to-your-second-file.js'\n  only: ['*.activerecord', '*.admin.*.title']\n```\n\nIf `only` is omitted all the translations will be saved. Also, make sure you add that initial `*`; it specifies that all languages will be exported. If you want to export only one language, you can do something like this:\n```yaml\ntranslations:\n- file: 'public/javascripts/en.js'\n  only: 'en.*'\n- file: 'public/javascripts/pt-BR.js'\n  only: 'pt-BR.*'\n```\n\nOptionally, you can auto generate a translation file per available locale if you specify the `%{locale}` placeholder.\n```yaml\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n- file: \"public/javascripts/frontend/i18n/%{locale}.js\"\n  only: ['frontend', 'users']\n```\n\nYou can also include ERB in your config file.\n```yaml\ntranslations:\n<% Widgets.each do |widget| %>\n- file: <%= \"'#{widget.file}'\" %>\n  only: <%= \"'#{widget.only}'\" %>\n<% end %>\n```\n\n#### Export Configuration (For other things)\n- `I18n::JS.config_file_path`  \n  Expected Type: `String`  \n  Default: `config/i18n-js.yml`  \n  Behaviour: Try to read the config file from that location  \n- `I18n::JS.export_i18n_js_dir_path`  \n  Expected Type: `String`  \n  Default: `public/javascripts`  \n  Behaviour:  \n  - Any `String`: considered as a relative path for a folder to `Rails.root` and export `i18n.js` to that folder for `rake i18n:js:export`\n  - `nil`: Disable `i18n.js` exporting\n\nTo find more examples on how to use the configuration file please refer to the tests.\n\n##### Fallbacks\n\nIf you specify the `fallbacks` option, you will be able to fill missing translations with those inside fallback locale(s).  \nDefault value is `true`.\n\nExamples:\n```yaml\nfallbacks: true\n\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n```\nThis will enable merging fallbacks into each file. (set to `false` to disable).\nIf you use `I18n` with fallbacks, the fallbacks defined there will be used.\nOtherwise `I18n.default_locale` will be used.\n\n```yaml\nfallbacks: :de\n\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n```\nHere, the specified locale `:de` will be used as fallback for all locales.\n\n```yaml\nfallbacks:\n  fr: [\"de\", \"en\"]\n  de: \"en\"\n\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n```\nFallbacks defined will be used, if not defined (e.g. `:pl`) `I18n.fallbacks` or `I18n.default_locale` will be used.\n\n```yaml\nfallbacks: :default_locale\n\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n```\nSetting the option to `:default_locale` will enforce the fallback to use the `I18n.default_locale`, ignoring `I18n.fallbacks`.\n\nExamples:\n```yaml\nfallbacks: false\n\ntranslations:\n- file: \"public/javascripts/i18n/%{locale}.js\"\n  only: '*'\n```\nYou must disable this feature by setting the option to `false`.\n\nTo find more examples on how to use the configuration file please refer to the tests.\n\n\n#### Vanilla JavaScript\n\nJust add the `i18n.js` file to your page. You'll have to build the translations object\nby hand or using your favorite programming language. More info below.\n\n### Setting up\n\nYou **don't** need to set up a thing. The default settings will work just okay. But if you want to split translations into several files or specify specific contexts, you can follow the rest of this setting up section.\n\nSet your locale is easy as\n```javascript\nI18n.defaultLocale = \"pt-BR\";\nI18n.locale = \"pt-BR\";\nI18n.currentLocale();\n// pt-BR\n```\n\n**NOTE:** You can now apply your configuration **before I18n** is loaded like this:\n```javascript\nI18n = {} // You must define this object in top namespace, which should be `window`\nI18n.defaultLocale = \"pt-BR\";\nI18n.locale = \"pt-BR\";\n\n// Load I18n from `i18n.js`, `application.js` or whatever\n\nI18n.currentLocale();\n// pt-BR\n```\n\nIn practice, you'll have something like the following in your `application.html.erb`:\n\n    <script type=\"text/javascript\">\n      I18n.defaultLocale = \"<%= I18n.default_locale %>\";\n      I18n.locale = \"<%= I18n.locale %>\";\n    </script>\n\nYou can use translate your messages:\n\n    I18n.t(\"some.scoped.translation\");\n    // or translate with explicit setting of locale\n    I18n.t(\"some.scoped.translation\", {locale: \"fr\"});\n\nYou can also interpolate values:\n\n    I18n.t(\"hello\", {name: \"John Doe\"});\n\nYou can set default values for missing scopes:\n\n    // simple translation\n    I18n.t(\"some.missing.scope\", {defaultValue: \"A default message\"});\n\n    // with interpolation\n    I18n.t(\"noun\", {defaultValue: \"I'm a {{noun}}\", noun: \"Mac\"});\n\nYou can also provide a list of default fallbacks for missing scopes:\n\n    // As a scope\n    I18n.t(\"some.missing.scope\", {defaults: [{scope: \"some.existing.scope\"}]});\n\n    // As a simple translation\n    I18n.t(\"some.missing.scope\", {defaults: [{message: \"some.existing.scope\"}]});\n\n    Default values must be provided as an array of hashs where the key is the\n    type of translation desired, a `scope` or a `message`. The translation returned\n    will be either the first scope recognized, or the first message defined.\n\n    The translation will fallback to the `defaultValue` translation if no scope\n    in `defaults` matches and if no default of type `message` is found.\n\nTranslation fallback can be enabled by enabling the `I18n.fallbacks` option:\n\n    <script type=\"text/javascript\">\n      I18n.fallbacks = true;\n    </script>\n\nBy default missing translations will first be looked for in less\nspecific versions of the requested locale and if that fails by taking\nthem from your `I18n.defaultLocale`.\n\n    // if I18n.defaultLocale = \"en\" and translation doesn't exist\n    // for I18n.locale = \"de-DE\" this key will be taken from \"de\" locale scope\n    // or, if that also doesn't exist, from \"en\" locale scope\n    I18n.t(\"some.missing.scope\");\n\nCustom fallback rules can also be specified for a particular language. There\nare three different ways of doing it so:\n\n    I18n.locales.no = [\"nb\", \"en\"];\n    I18n.locales.no = \"nb\";\n    I18n.locales.no = function(locale){ return [\"nb\"]; };\n\nPluralization is possible as well and by default provides English rules:\n\n    I18n.t(\"inbox.counting\", {count: 10}); // You have 10 messages\n\nThe sample above expects the following translation:\n\n    en:\n      inbox:\n        counting:\n          one: You have 1 new message\n          other: You have {{count}} new messages\n          zero: You have no messages\n\n**NOTE:** Rails I18n recognizes the `zero` option.\n\nIf you need special rules just define them for your language, for example Russian, just add a new pluralizer:\n\n    I18n.pluralization[\"ru\"] = function (count) {\n      var key = count % 10 == 1 && count % 100 != 11 ? \"one\" : [2, 3, 4].indexOf(count % 10) >= 0 && [12, 13, 14].indexOf(count % 100) < 0 ? \"few\" : count % 10 == 0 || [5, 6, 7, 8, 9].indexOf(count % 10) >= 0 || [11, 12, 13, 14].indexOf(count % 100) >= 0 ? \"many\" : \"other\";\n      return [key];\n    };\n\nYou can find all rules on <http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html>.\n\nIf you're using the same scope over and over again, you may use the `scope` option.\n\n    var options = {scope: \"activerecord.attributes.user\"};\n\n    I18n.t(\"name\", options);\n    I18n.t(\"email\", options);\n    I18n.t(\"username\", options);\n\nYou can also provide an array as scope.\n\n    // use the greetings.hello scope\n    I18n.t([\"greetings\", \"hello\"]);\n\n#### Number formatting\n\nSimilar to Rails helpers, you have localized number and currency formatting.\n\n    I18n.l(\"currency\", 1990.99);\n    // $1,990.99\n\n    I18n.l(\"number\", 1990.99);\n    // 1,990.99\n\n    I18n.l(\"percentage\", 123.45);\n    // 123.450%\n\nTo have more control over number formatting, you can use the\n`I18n.toNumber`, `I18n.toPercentage`, `I18n.toCurrency` and `I18n.toHumanSize`\nfunctions.\n\n    I18n.toNumber(1000);     // 1,000.000\n    I18n.toCurrency(1000);   // $1,000.00\n    I18n.toPercentage(100);  // 100.000%\n\nThe `toNumber` and `toPercentage` functions accept the following options:\n\n- `precision`: defaults to `3`\n- `separator`: defaults to `.`\n- `delimiter`: defaults to `,`\n- `strip_insignificant_zeros`: defaults to `false`\n\nSee some number formatting examples:\n\n    I18n.toNumber(1000, {precision: 0});                   // 1,000\n    I18n.toNumber(1000, {delimiter: \".\", separator: \",\"}); // 1.000,000\n    I18n.toNumber(1000, {delimiter: \".\", precision: 0});   // 1.000\n\nThe `toCurrency` function accepts the following options:\n\n- `precision`: sets the level of precision\n- `separator`: sets the separator between the units\n- `delimiter`: sets the thousands delimiter\n- `format`: sets the format of the output string\n- `unit`: sets the denomination of the currency\n- `strip_insignificant_zeros`: defaults to `false`\n\nYou can provide only the options you want to override:\n\n    I18n.toCurrency(1000, {precision: 0}); // $1,000\n\nThe `toHumanSize` function accepts the following options:\n\n- `precision`: defaults to `1`\n- `separator`: defaults to `.`\n- `delimiter`: defaults to `\"\"`\n- `strip_insignificant_zeros`: defaults to `false`\n- `format`: defaults to `%n%u`\n\n<!---->\n\n    I18n.toHumanSize(1234); // 1KB\n    I18n.toHumanSize(1234 * 1024); // 1MB\n\n#### Date formatting\n\n    // accepted formats\n    I18n.l(\"date.formats.short\", \"2009-09-18\");           // yyyy-mm-dd\n    I18n.l(\"time.formats.short\", \"2009-09-18 23:12:43\");  // yyyy-mm-dd hh:mm:ss\n    I18n.l(\"time.formats.short\", \"2009-11-09T18:10:34\");  // JSON format with local Timezone (part of ISO-8601)\n    I18n.l(\"time.formats.short\", \"2009-11-09T18:10:34Z\"); // JSON format in UTC (part of ISO-8601)\n    I18n.l(\"date.formats.short\", 1251862029000);          // Epoch time\n    I18n.l(\"date.formats.short\", \"09/18/2009\");           // mm/dd/yyyy\n    I18n.l(\"date.formats.short\", (new Date()));           // Date object\n\nYou can also add placeholders to the date format:\n\n    I18n.translations[\"en\"] = {\n      date: {\n        formats: {\n          ordinal_day: \"%B %{day}\"\n        }\n      }\n    }\n    I18n.l(\"date.formats.ordinal_day\", \"2009-09-18\", { day: '18th' }); // Sep 18th\n\nIf you prefer, you can use the `I18n.strftime` function to format dates.\n\n    var date = new Date();\n    I18n.strftime(date, \"%d/%m/%Y\");\n\nThe accepted formats are:\n\n    %a  - The abbreviated weekday name (Sun)\n    %A  - The full weekday name (Sunday)\n    %b  - The abbreviated month name (Jan)\n    %B  - The full month name (January)\n    %d  - Day of the month (01..31)\n    %-d - Day of the month (1..31)\n    %H  - Hour of the day, 24-hour clock (00..23)\n    %-H - Hour of the day, 24-hour clock (0..23)\n    %I  - Hour of the day, 12-hour clock (01..12)\n    %-I - Hour of the day, 12-hour clock (1..12)\n    %m  - Month of the year (01..12)\n    %-m - Month of the year (1..12)\n    %M  - Minute of the hour (00..59)\n    %-M - Minute of the hour (0..59)\n    %p  - Meridian indicator (AM  or  PM)\n    %S  - Second of the minute (00..60)\n    %-S - Second of the minute (0..60)\n    %w  - Day of the week (Sunday is 0, 0..6)\n    %y  - Year without a century (00..99)\n    %-y - Year without a century (0..99)\n    %Y  - Year with century\n    %z  - Timezone offset (+0545)\n\nCheck out `spec/*.spec.js` files for more examples!\n\n## Using I18n.js with other languages (Python, PHP, ...)\n\nThe JavaScript library is language agnostic; so you can use it with PHP, Python, [your favorite language here].\nThe only requirement is that you need to set the `translations` attribute like following:\n\n    I18n.translations = {};\n\n    I18n.translations[\"en\"] = {\n      message: \"Some special message for you\"\n    }\n\n    I18n.translations[\"pt-BR\"] = {\n      message: \"Uma mensagem especial para você\"\n    }\n\n## Known Issues\n\n### Missing translations in precompiled file(s) after adding any new locale file\n\nDue to the design of `sprockets`:\n- `depend_on` only takes file paths, not directory paths\n- registered `preprocessors` are only run when fingerprint of any asset file, including `.erb` files, is changed\n\nNew locale files won't be picked up unless any existing locale file content is changed.  \nYou can workaround it manually by running\n```bash\n$ rake assets:clobber\n```\nto clear the asset cache.  \n**Or**  \nChange something in existing locale file.  \n**Or**  \nChange `config.assets.version`  \n\n**Note:** `rake assets:clobber` will also remove all fingerprinted assets.  \nIf you are precompiling assets on target machine(s),\nold assets might be removed and cannot be served in cached pages.\n\nPlease see issue #213 for detail & related discussion.\n\n\n## Maintainer\n\n- Nando Vieira - <http://nandovieira.com.br>\n\n## Contributing\n\nOnce you've made your great commits:\n\n1. [Fork](http://help.github.com/forking/) I18n.js\n2. Create a branch with a clear name\n3. Make your changes (Please also add/change spec, README and CHANGELOG if applicable)\n4. Push changes to the created branch\n5. [Create an Pull Request](http://github.com/fnando/i18n-js/pulls)\n6. That's it!\n\nPlease respect the indentation rules and code style.\nAnd use 2 spaces, not tabs. And don't touch the versioning thing.\n\n## Running tests\n\nYou can run I18n tests using Node.js or your browser.\n\nTo use Node.js, install the `jasmine-node` library:\n\n    $ npm install jasmine-node\n\nThen execute the following command from the lib's root directory:\n\n    $ npm test\n\nTo run using your browser, just open the `spec/js/specs.html` file.\n\nYou can run both Ruby and JavaScript specs with `rake spec`.\n\n## License\n\n(The MIT License)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "jasmine-node spec/js"
  },
  "version": "0.0.0"
}
